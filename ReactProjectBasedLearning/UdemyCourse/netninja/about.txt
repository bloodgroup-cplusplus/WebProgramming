The general layout-of the land 

Node-modules : react library itself is a node package 
Public: put any files that would be made public to the browser 
favicon: 
robots.txt: crawlers find this file 
We have a single html file here 
If we have a single page application we only get a single page application served back to the browser 
Root is the place where react app will be injected to the page 


Soruce folder : Uncompiled react-source code will go 
99% of stuffs are done inside the source folder 

Any react content or component are going to go inside a source folder 

App.js :- This is a react component file 
Each component will have its own file ( React components are just functions )


App.css:- This is being used to style app.js compoentnt 

Index.css-: is used to style the entire page 


App.test.js : writing test for app components 

setupTest.js: test files 

reportwebvitals: performance of react files 


Index.js: kickstart our application 


----------------------------------------------------------------------------------------------------


State and Why we need It?
* States are component data which may change over time 
* We might have a todolist on a webpage 

* If we were to add a new to-do in a todolist 
* If we were to delete a todo 
* In this example the to-do data inside the component is called as todo-state 
* A dropdown content box on a webpage could be a react component 
* State might not be that obvious 
* We toggle when to hide and when to show it 
* Toggling between true or false 
* state= isOpen( true or false) 
* can we use variables 

----------------------------------------------------------------------------------------

a Simple react functional component that looks like this 


const App=() =>{
    return (
        <div className="app"> Hello, Chad!</div>


    )
}


is actually changed into javascript like this 
 this is called the virtual dom 
 // react compares the previous virtual dom with the new one 
 // it gives a deeper understanding of what is happening with the States
 

React.createElement(
    'div'
    {class: 'app'},
    "Hello Chad!"
)


-------------------------------------------------------------------------------------------------------------------

* use state should be at a top level of a function component 
* a react hook should be used 
* hook cannot be used outside a component 
* most of the times hooks are used on top of the components 


-------------------------------------------------------------

* To use <props inside a fragment without using div we need the React.fragment keyword 

<div key= {event.id}> if we want to remove the div and just create an empty fragment then we do something like this

<React.fragment key={event.id}>


</React.fragment>


------------------------------------------------------------------------------------------------------

PORTALS 

* A portal is a way to take a component and render it outside a dom outside the scope of parent component 
* we use a portal in whatever component we want to pick up and use it in place 

--------------------------------------------------------------------------------------

Class components are old way of making react projects . 

Differnce lies beween created 
class component is a js class which extends a react cmoponent 

class Clock extends React.Component 
{
    constructor(props)
    {
        super(props)
        this.state={
            date:new Date()
        }
    }
}

render(){

    return (

        <div>
        <h1> Hello, {this.props.name}/>

    );
}


while a function component works this way 

import {useState} from "react"

export default function Clock({name}){
    const [date,setDate]=useState(new Date())

    return (
        <div>
        <h1>Hello,{name}</h1>
        <h2> It is {date.toLocaleTimeString()}.</h2>
        </div>
    )
}

------------------------------------------------------------------------------------

CSS Modules : Css modules automatically scope to only apply in specific components 

let's make a module for eventlist 

css modules are scoped to the components that we use them in 

using one css module in one component wont harm another component 


Using the Ref Hook 

Refs are a way of getting reference to a raw dom element directly  in vinalla js 
we could potentially get refs to each one of inputs 

Just like in vanilla js 

We use a hook called "useRef" in react 
typically we use state and usestate but it makes a sense to learn it 
