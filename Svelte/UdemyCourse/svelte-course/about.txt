What is Svelte 
* Svelte provides a way to build declarative, state driven user interfaces 
* Svelte itself is a compiler ( we don't have to run it on the broweser)
* Your compiled code will directly modify the DOm without the overhead of virtual dom 
* Svelte produces the code that will manipulate the DOM at build time. It's not something that you
need to load on the client side(browser)

* In other frameworks, you have to serve the framework itself in addition to your own code. In 
Svelte, the framework is embedded in your code 



React JS Example:


HelloMessage.js                                                 App.js 
                                                        import {useSate} from "react";
                                                        import HelloMessage from "./HelloMessage"
                                                        function App()
                                                        {
                                                            const [name,setName]=useState("World");
                                                            function handleChange(event){
                                                                setName(event.target.value)
                                                            }
                                                            return (
                                                                <>
                                                                    <HelloMessage name={name} />
                                                                    <input 
                                                                        type="text"
                                                                        value={name}
                                                                        onChange={handleNameChange}
                                                                    />
                                                                </>
                                                            );                                                        }
function HelloMessage(props){
    return (
        <div className="greeting">
            Hello {props.name}
            </div>
    );
}

*we need to wrap in div or fragments in case of react 
* we need to update state when we update our input 
* 


We have the same example using svelte 


HelloMessage.svelte                                         App.svelte


<script>                                            <script>
    export let name =''                             import HelloMessage from "./HelloMessage.svelte'
</script>                                               let name = "World";
                                                    </script>
<div class="greeting>                               <HelloMessage name={name} />
    Hello {name}                                    <input bind:value={name}>
</div>


* svelte is a compiler it will be compiled 
* react component is typically around 40% larger than its Svelte equivalent 
* svelte code is more equivalent 



* React uses virtual dom 


                            Browser (Loads)

                            React JS
                            React DOM 

                            Component(s)
                            React keeps a refrence to old virtual dom object snapshot (before state changed)
                            and new virtual dom object snapshot(after state changed)
                            Check each div and div attributes 
                            1- div element did not change, nod need to update the DOM node 
                            2- No change in attributes 
                            3- Text has changed; Update the real DOM 

* In svelte 
It directly does (3) (above react) much more efficient than other frameworks 

* In most cases the virtual dom is fast enough 

* However Svelte eliminates the extra overhead of virtual DOM comparision 

* Your compiled Svlete code will manipulate the DOM Directly without having to compare virtual DOM objects 


* Your svelte app will be smaller since you won't have to load a library in the browser. You only load 
your compiled code 


* "The svelte implementation of TodoMVC ewights 3.6kb zipped. For comparision, React plus ReactDOM
without any app code wighs about 45kb zipped. It takes about 10x as long for the borwser just to evaluate 
React as it does for Svelte to be up and running with an interative Tool MVC





SVELTE                                                                SVELTE KIT 

* component based javascript framework                   * Svelte kit is a framework for building 
                                                            building extremely high performance 
                                                            web apps 

* Allows you to build state driven components           * Routing, prefetching, offline support, 
                                                         SSR, progressive enhancemnt and more.
for the web in a declarative way 




SvelteKit to Svelte is like NextJS to React JS or NuxtJs To Vue.


What are the folders ? 

The vite.config file defines the struct 
Package the json has the dev scripts and build and preview for production and build 

we have jsconfig and index.html 




Each svelte component contains three parts 


Script
<script></script>

Markup 

<h1></h1>


Style 

<style></style>


What is minification?


Minification is the process of minimizing code and markup in your 
web pages and script files. It’s one of the main methods used to reduce
load times and bandwidth usage on websites. Minification dramatically 
improves site speed and accessibility, directly translating into a 
better user experience. It’s also beneficial to users accessing your 
website through a limited data plan and who would like to save on 
their bandwidth usage while surfing the web.

Why minify HTML, CSS, and JavaScript (JS)
When creating HTML, CSS and JavaScript (JS) files, developers tend to use spacing, comments and well-named variables to make code and markup readable for themselves. It also helps others who might later work on the assets. While this is a plus in the development phase, it becomes a negative when it comes to serving your pages. Web servers and browsers can parse file content without comments and well-structured code, both of which create additional network traffic without providing any functional benefit.

To minify JS, CSS and HTML files, comments and extra spaces need to be removed, as well as crunch variable names so as to minimize code and reduce file size. The minified file version provides the same functionality while reducing the bandwidth of network requests.

Here’s how a developer would write a JavaScript file for usage in a website:


The minified version of this sample code is 48% smaller. In some cases, minification can reduce file size by as much as 60%. For instance, there’s a 176 kb difference between the original and minified version of the JQuery JavaScript library.

Minification has become standard practice for page optimization. All major JavaScript library developers (bootstrap, JQuery, AngularJS, etc.) provide minified versions of their files for production deployments, usually denoted with a min.js name extension.